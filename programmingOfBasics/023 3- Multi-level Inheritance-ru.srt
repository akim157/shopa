1

00:00:00,000 --> 00:00:04,000

Давайте посмотрим на



2

00:00:04,000 --> 00:00:08,000

другой пример. Я собираюсь определить пустой массив, давайте назовем это



3

00:00:08,000 --> 00:00:12,000

туАггау. Теперь давайте проверим это.



4

00:00:12,000 --> 00:00:16,000

Хорошо, так вот, у нас есть



5

00:00:16,000 --> 00:00:20,000

свойство prototype, давайте посмотрим на прототип или родительский



6

00:00:20,000 --> 00:00:24,000

для этого массива. Хорошо, смотри, в этом объекте у нас есть



7

00:00:24,000 --> 00:00:28,000

эти методы. Скорее всего, вы использовали некоторые из этих методов раньше.



8

00:00:28,000 --> 00:00:32,000

Например, мы можем вызвать аутентификацию по индексу, чтобы найти



9

00:00:32,000 --> 00:00:36,000

объект в массиве, вы можете вызвать push, чтобы добавить новый объект в



10

00:00:36,000 --> 00:00:40,000

массив и тд. Таким образом, все эти методы определены в этом методе



11

00:00:40,000 --> 00:00:44,000

который является прототипом или родителем для всех массивов в JavaScript.



12

00:00:44,000 --> 00:00:48,000

Так что это то, что у нас в памяти, у нас есть myArray.



13

00:00:48,000 --> 00:00:52,000

Что происходит от, давайте назовем этот массив базы. Сейчас,



14

00:00:52,000 --> 00:00:56,000

давайте проверим прототип объекта на основе массива. Так,



15

00:00:56,000 --> 00:01:00,000

назад, когда вы прокрутите вниз, посмотрите здесь, у вас есть



16

00:01:00,000 --> 00:01:04,000

еще одно свойство proto, давайте расширим это,



17

00:01:04,000 --> 00:01:08,000

что ты здесь видишь? Это выглядит знакомо, верно? Это наш объект



18

00:01:08,000 --> 00:01:12,000

база. Или корневой объект в JavaScript, так что вот



19

00:01:12,000 --> 00:01:16,000

визуализация того, что у нас в памяти. Мой массив выводит



20

00:01:16,000 --> 00:01:20,000

из arrayBase, а arrayBase наследуется от objectBase.



21

00:01:20,000 --> 00:01:24,000

Это то, что мы называем многоуровневым наследованием.



22

00:01:24,000 --> 00:01:28,000

А как насчет объектов, которые вы создаете с помощью пользовательских конструкторов?



23

00:01:28,000 --> 00:01:32,000

Итак, здесь у нас есть конструктор, круг, и мы имеем



24

00:01:32,000 --> 00:01:36,000

создал объект круга с помощью этого конструктора. Итак, давайте проверим



25

00:01:36,000 --> 00:01:40,000

это на консоли. Итак, круг,



26

00:01:40,000 --> 00:01:44,000

вот наш объект круга, у него есть прототип



27

00:01:44,000 --> 00:01:48,000

смотри, этот прототип является прототипом



28

00:01:48,000 --> 00:01:52,000

для всех объектов круга, которые мы создаем, используя наш круг



29

00:01:52,000 --> 00:01:56,000

конструктор. Давайте назовем этот круг базой.



30

00:01:56,000 --> 00:02:00,000

Поэтому каждый раз, когда мы вызываем конструктор круга, чтобы создать



31

00:02:00,000 --> 00:02:04,000

новый объект круга, этот конструктор создаст



32

00:02:04,000 --> 00:02:08,000

новый объект и установить его свойство прототипа



33

00:02:08,000 --> 00:02:12,000

круг базы Другими словами, объекты, созданные



34

00:02:12,000 --> 00:02:16,000

данный конструктор будет иметь такой же прототип. Итак все



35

00:02:16,000 --> 00:02:20,000

объекты круга, созданные конструктором круга, будут иметь одинаковые



36

00:02:20,000 --> 00:02:24,000

прототип, а также, все массивы, созданные



37

00:02:24,000 --> 00:02:28,000

Конструктор массива будет иметь тот же прототип. Сейчас,



38

00:02:28,000 --> 00:02:32,000

вот так вот, это наша круговая база, круговая база



39

00:02:32,000 --> 00:02:36,000

также есть прототип. Посмотрим, что у нас здесь.



40

00:02:36,000 --> 00:02:40,000

Что это за объект? Это объектная база, верно? Корневой объект



41

00:02:40,000 --> 00:02:44,000

в JavaScript. Так что это то, что у нас в памяти. У нас есть объект круга



42

00:02:44,000 --> 00:02:48,000

который наследует от circleBase, а circleBase наследует от



43

00:02:48,000 --> 00:02:51,433

objectBase.