1

00:00:00,000 --> 00:00:04,000

Итак, вы узнали, как



2

00:00:04,000 --> 00:00:08,000

Легко изменить прототип объекта, так



3

00:00:08,000 --> 00:00:12,000

у вас может возникнуть соблазн сделать что-то подобное, поэтому массив



4

00:00:12,000 --> 00:00:16,000

.prototype.shuffle, мы собираемся добавить новый метод



5

00:00:16,000 --> 00:00:20,000

к нашим массивам для перемешивания и массива.



6

00:00:20,000 --> 00:00:24,000

Теперь давайте не будем беспокоиться об алгоритме тасования массива.



7

00:00:24,000 --> 00:00:28,000

Теперь, с этим, мы можем определить массив



8

00:00:28,000 --> 00:00:32,000

как это, и мы сможем позвонить в случайном порядке



9

00:00:32,000 --> 00:00:36,000

метод. Теперь, хотя это очень легко сделать в JavaScript,



10

00:00:36,000 --> 00:00:40,000

это то, что вы должны избегать. Вы не должны изменять встроенный



11

00:00:40,000 --> 00:00:44,000

объекты в JavaScript. Потому что это возможно, вы идете



12

00:00:44,000 --> 00:00:48,000

использовать библиотеку, и в этой библиотеке кто-то также



13

00:00:48,000 --> 00:00:52,000

расширил прототип массива и добавил перемешивание



14

00:00:52,000 --> 00:00:56,000

метод, но с другой реализацией. Тогда вы бы в конечном итоге тратить все



15

00:00:56,000 --> 00:01:00,000

день отладки проблемы. Кроме того, ничто не останавливает



16

00:01:00,000 --> 00:01:04,000

разработчики Javascript от добавления этого метода массивов в будущих версиях



17

00:01:04,000 --> 00:01:08,000

JavaScript, так что вот урок. Не модифицируйте



18

00:01:08,000 --> 00:01:12,000

объект, которым вы не владеете. Да, JavaScript это динамический язык,



19

00:01:12,000 --> 00:01:16,000

это позволяет легко добавлять свойства и методы к существующему объекту,



20

00:01:16,000 --> 00:01:20,000

но это не значит, что вы должны модифицировать встроенные объекты.



21

00:01:20,000 --> 00:01:24,000

Итак, не переписывайте методы, не добавляйте новые методы или свойства,



22

00:01:24,000 --> 00:01:28,000

и не удаляйте существующие свойства и методы, потому что где-то



23

00:01:28,000 --> 00:01:32,000

иначе в библиотеке, которую вы используете, может быть код, который зависит



24

00:01:32,000 --> 00:01:36,000

на эти методы во встроенных объектах. Так что если



25

00:01:36,000 --> 00:01:40,000

Вы модифицируете встроенные объекты, вы будете создавать всевозможные проблемы.