1

00:00:00,000 --> 00:00:04,000

В JavaScript у нас есть два



2

00:00:04,000 --> 00:00:08,000

категории типов. С одной стороны у нас есть типы значений,



3

00:00:08,000 --> 00:00:12,000

также называемые примитивами, с другой стороны мы имеем



4

00:00:12,000 --> 00:00:16,000

ссылочные типы. Таким образом, в категории типов значений у нас есть номер,



5

00:00:16,000 --> 00:00:20,000

строка, логическое значение, символ, который является новым



6

00:00:20,000 --> 00:00:24,000

в ES6, а также неопределенный



7

00:00:24,000 --> 00:00:28,000

и ноль. Это типы примитивов или значений. На



8

00:00:28,000 --> 00:00:32,000

с другой стороны у нас есть объекты, функции и массивы.



9

00:00:32,000 --> 00:00:36,000

Итак, в последней лекции вы узнали, что функции также являются объектами.



10

00:00:36,000 --> 00:00:40,000

То же самое относится и к массивам, поэтому в двух словах в JavaScript



11

00:00:40,000 --> 00:00:44,000

у нас есть примитивы и объекты. Теперь в этой лекции я собираюсь показать вам,



12

00:00:44,000 --> 00:00:48,000

как примитивы и объекты ведут себя по-разному, потому что это



13

00:00:48,000 --> 00:00:52,000

абсолютно важно, чтобы вы поняли, прежде чем мы перейдем к следующему разделу



14

00:00:52,000 --> 00:00:56,000

где я говорю о прототипах. Скоро



15

00:00:56,000 --> 00:01:00,000

этот пустой холст, я собираюсь определить два примитива,



16

00:01:00,000 --> 00:01:04,000

х и у. Я собираюсь установить у



17

00:01:04,000 --> 00:01:08,000

х, так что здесь у 10, теперь я собираюсь изменить



18

00:01:08,000 --> 00:01:12,000

значение от х до 20, что я хочу, чтобы вы отметили здесь,



19

00:01:12,000 --> 00:01:16,000

является то, что х и у две независимые переменные,



20

00:01:16,000 --> 00:01:20,000

Итак, давайте сохраним изменения, вернемся в консоль,



21

00:01:20,000 --> 00:01:24,000

давайте войдем в х, х равен 20, а у



22

00:01:24,000 --> 00:01:28,000

10, они независимы. Поэтому, когда мы работаем



23

00:01:28,000 --> 00:01:32,000

с примитивами. Это значение, это значение, которое мы имеем здесь



24

00:01:32,000 --> 00:01:36,000

хранится внутри этой переменной. Когда мы копируем эту переменную



25

00:01:36,000 --> 00:01:40,000

это значение, которое хранится в переменной



26

00:01:40,000 --> 00:01:44,000

скопированы в эту новую переменную. Так что они полностью



27

00:01:44,000 --> 00:01:48,000

независимы друг от друга. Теперь посмотрим что получится



28

00:01:48,000 --> 00:01:52,000

если мы используем ссылочный тип или объект здесь. Так что я собираюсь



29

00:01:52,000 --> 00:01:56,000

изменить это на объект, который имеет свойство с именем



30

00:01:56,000 --> 00:02:00,000

значение. И тогда вместо того, чтобы сказать х



31

00:02:00,000 --> 00:02:04,000

до 20, я собираюсь установить x.value в 20.



32

00:02:04,000 --> 00:02:08,000

Так что сохраните изменения обратно в консоль,



33

00:02:08,000 --> 00:02:12,000

давайте запишем x, чтобы вы могли видеть значение свойства 20,



34

00:02:12,000 --> 00:02:16,000

теперь давайте войдем у, вы можете увидеть значение свойства у



35

00:02:16,000 --> 00:02:20,000

также 20. Так что это вынос. Когда мы используем



36

00:02:20,000 --> 00:02:24,000

объект, этот объект не хранится в этой переменной.



37

00:02:24,000 --> 00:02:28,000

Этот объект хранится где-то еще в памяти, и



38

00:02:28,000 --> 00:02:32,000

адрес этой ячейки памяти хранится внутри этой переменной памяти.



39

00:02:32,000 --> 00:02:36,000

Итак, когда мы копируем х в у,



40

00:02:36,000 --> 00:02:40,000

это адрес или ссылка, которая копируется. В других



41

00:02:40,000 --> 00:02:44,000

слова, оба х и у указывают на то же самое,



42

00:02:44,000 --> 00:02:48,000

объект в памяти. И когда мы модифицируем каждый объект, используя х,



43

00:02:48,000 --> 00:02:52,000

или y, наши изменения сразу видны



44

00:02:52,000 --> 00:02:56,000

другая переменная. Итак, вот и вывод. Примитивы



45

00:02:56,000 --> 00:03:00,000

копируются по значению, ссылочные типы или объекты копируются



46

00:03:00,000 --> 00:03:04,000

по их ссылке. Давайте посмотрим на другой пример.



47

00:03:04,000 --> 00:03:08,000

Итак, я собираюсь определить функцию



48

00:03:08,000 --> 00:03:12,000

называется увеличение, которое занимает число,



49

00:03:12,000 --> 00:03:16,000

и здесь мы просто увеличиваем это число на единицу.



50

00:03:16,000 --> 00:03:20,000

Давайте объявим номер



51

00:03:20,000 --> 00:03:24,000

переменная и установите его в 10. А затем вызвать увеличение



52

00:03:24,000 --> 00:03:28,000

и передать этот номер. Теперь, если я



53

00:03:28,000 --> 00:03:32,000

запишите этот номер на консоли, что вы думаете



54

00:03:32,000 --> 00:03:36,000

вот увидишь? Давайте посмотрим. Так что сохраните изменения,



55

00:03:36,000 --> 00:03:40,000

мы видим 10. Но мы не увеличили число,



56

00:03:40,000 --> 00:03:44,000

хорошо, когда мы вызываем увеличение и передаем эту переменную числа



57

00:03:44,000 --> 00:03:48,000

это значение копируется в это



58

00:03:48,000 --> 00:03:52,000

параметр, который является локальным в этой функции. Так это



59

00:03:52,000 --> 00:03:56,000

переменная здесь полностью не зависит от этого



60

00:03:56,000 --> 00:04:00,000

другая числовая переменная. Здесь, в этой функции, мы увеличиваем это число



61

00:04:00,000 --> 00:04:04,000

на 1, так что будет 11, но после этой функции это число



62

00:04:04,000 --> 00:04:08,000

собирается выйти за рамки. Поэтому, когда мы регистрируем



63

00:04:08,000 --> 00:04:12,000

этот номер на консоли, мы по сути дела



64

00:04:12,000 --> 00:04:16,000

с этим первым номером. Итак, я сказал вам, что примитивы



65

00:04:16,000 --> 00:04:20,000

копируются по их стоимости. Итак, здесь мы имеем дело с двумя независимыми



66

00:04:20,000 --> 00:04:24,000

копии. Вот почему вы видите 10 на



67

00:04:24,000 --> 00:04:28,000

приставка. Теперь давайте изменим это на ссылочный тип или объект.



68

00:04:28,000 --> 00:04:32,000

Итак, я собираюсь изменить 10 на объект, который



69

00:04:32,000 --> 00:04:36,000

имеет значение свойства. Хорошо? Давайте



70

00:04:36,000 --> 00:04:40,000

переименуйте эту переменную в объект и



71

00:04:40,000 --> 00:04:44,000

аналогично, любой переименовывает параметр в этой функции



72

00:04:44,000 --> 00:04:48,000

к объекту, а затем увеличить объект.



73

00:04:48,000 --> 00:04:52,000

значение. Теперь, когда мы регистрируем это на консоли,



74

00:04:52,000 --> 00:04:56,000

что вы думаете мы увидим? Мы увидим 11. Видите?



75

00:04:56,000 --> 00:05:00,000

Мы получили этот объект со значением 11. Причина этого



76

00:05:00,000 --> 00:05:04,000

потому что когда мы называем увеличение и передать этот объект.



77

00:05:04,000 --> 00:05:08,000

Этот объект передается по ссылке. Так что это местный



78

00:05:08,000 --> 00:05:12,000

параметр, который мы имеем здесь, будет указывать на тот же объект



79

00:05:12,000 --> 00:05:16,000

что мы определили здесь. Так что в этом случае мы не имеем дело с



80

00:05:16,000 --> 00:05:20,000

две независимые копии, у нас есть две переменные, которые указывают на то же



81

00:05:20,000 --> 00:05:24,000

объект. Поэтому любые изменения, которые мы вносим в этот объект, будут видны



82

00:05:24,000 --> 00:05:28,000

к другой переменной. Запомните это в JavaScript



83

00:05:28,000 --> 00:05:32,000

у нас есть типы значений, также называемые примитивами, а также



84

00:05:32,000 --> 00:05:36,000

ссылочные типы, которые являются объектами. Наши примитивы



85

00:05:36,000 --> 00:05:40,000

число, строка, логическое значение, неопределенное и



86

00:05:40,000 --> 00:05:44,000

ноль. Примитивы или типы значений копируются по их значению



87

00:05:44,000 --> 00:05:48,000

ссылочные типы или объекты, копируются по их ссылке.