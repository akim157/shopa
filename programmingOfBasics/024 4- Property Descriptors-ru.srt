1

00:00:00,000 --> 00:00:04,000

Хорошо, теперь позвольте мне показать вам



2

00:00:04,000 --> 00:00:08,000

что-то интересное, поэтому я собираюсь определить новый объект, как человек,



3

00:00:08,000 --> 00:00:12,000

и установите его имя Mosh.



4

00:00:12,000 --> 00:00:16,000

Давайте войдем в консоль,



5

00:00:16,000 --> 00:00:20,000

человек, так что,



6

00:00:20,000 --> 00:00:24,000

вот объект нашего человека. И в этом прототипе,



7

00:00:24,000 --> 00:00:28,000

у нас есть все эти методы доступны



8

00:00:28,000 --> 00:00:32,000

Таким образом, мы можем напечатать person.toString, и это работает.



9

00:00:32,000 --> 00:00:36,000

Однако, если мы переберем членов этого объекта,



10

00:00:36,000 --> 00:00:40,000

мы не увидим этот метод toString, так что



11

00:00:40,000 --> 00:00:44,000

для цикла,



12

00:00:44,000 --> 00:00:48,000

пусть ключ лично, давайте просто войти



13

00:00:48,000 --> 00:00:52,000

ключ на консоли, сохранить, поэтому



14

00:00:52,000 --> 00:00:56,000

Единственный ключ, который у нас есть, это имя. Ни один из свойств и методов



15

00:00:56,000 --> 00:01:00,000

определенные в objectBase видны здесь. К тому же,



16

00:01:00,000 --> 00:01:04,000

если мы вызываем object.keys



17

00:01:04,000 --> 00:01:08,000

человек, а затем войти в консоль,



18

00:01:08,000 --> 00:01:12,000

опять же, мы видим только имя свойства. Так как



19

00:01:12,000 --> 00:01:16,000

давай мы не можем перебрать все эти свойства и методы, определенные



20

00:01:16,000 --> 00:01:20,000

в objectBase. Ну причина в том, что в JavaScript



21

00:01:20,000 --> 00:01:24,000

к нашим свойствам прикреплены атрибуты.



22

00:01:24,000 --> 00:01:28,000

Иногда эти атрибуты мешают собственности



23

00:01:28,000 --> 00:01:32,000

от перечисления. Позвольте мне показать вам, что я имею в виду. Так,



24

00:01:32,000 --> 00:01:36,000

во-первых, давайте получим прототип, или человека, которого мы называем



25

00:01:36,000 --> 00:01:40,000

Object.getPrototypeOf



26

00:01:40,000 --> 00:01:44,000

человек, так что это наш объект



27

00:01:44,000 --> 00:01:48,000

База, верно? Теперь я хочу показать вам атрибуты



28

00:01:48,000 --> 00:01:52,000

привязан к свойству две строки, или, точнее,



29

00:01:52,000 --> 00:01:56,000

двухстрочный метод. Итак, мы называем объект



30

00:01:56,000 --> 00:02:00,000

дескриптор свойства .getOwn.



31

00:02:00,000 --> 00:02:04,000

Итак, в качестве первого аргумента мы передаем objectBase.



32

00:02:04,000 --> 00:02:08,000

В качестве второго аргумента мы передаем имя



33

00:02:08,000 --> 00:02:12,000

целевое свойство или метод, который является toString.



34

00:02:12,000 --> 00:02:16,000

И это вернет объект, который мы называем дескриптором свойства.



35

00:02:16,000 --> 00:02:20,000

Позволь мне показать тебе. Итак, давайте сохраним это



36

00:02:20,000 --> 00:02:24,000

в дескрипторе, так что теперь давайте



37

00:02:24,000 --> 00:02:28,000

зарегистрируйте этот дескриптор на консоли.



38

00:02:28,000 --> 00:02:32,000

Итак, вот наш объект дескриптора.



39

00:02:32,000 --> 00:02:36,000

Посмотрите на свойства. Конфигурируемый это правда.



40

00:02:36,000 --> 00:02:40,000

Это означает, что мы можем удалить этого участника, если мы хотим



41

00:02:40,000 --> 00:02:44,000

перечисляемый является ложным. И именно поэтому, когда мы перебрали



42

00:02:44,000 --> 00:02:48,000

наш объект person, мы не смогли увидеть метод toString. Мы тоже



43

00:02:48,000 --> 00:02:52,000

иметь возможность записи, установить в значение true, что означает, что мы можем переписать это



44

00:02:52,000 --> 00:02:56,000

метод. Мы можем изменить его реализацию, а затем установить его значение.



45

00:02:56,000 --> 00:03:00,000

А вот свойство value, которое установлено для метода и



46

00:03:00,000 --> 00:03:04,000

это где у нас есть реализация по умолчанию метода двух строк.



47

00:03:04,000 --> 00:03:08,000

Теперь, когда вы создаете свои собственные объекты, вы можете отправить эти атрибуты для вашего



48

00:03:08,000 --> 00:03:12,000

свойства. Позвольте мне показать вам пример. Итак, мы



49

00:03:12,000 --> 00:03:16,000

собираюсь использовать наш личный объект. Нам больше не нужны эти строки.



50

00:03:16,000 --> 00:03:20,000

Ранее в последнем разделе вы узнали об объекте.



51

00:03:20,000 --> 00:03:24,000

метод defineProperty. Мы использовали это, чтобы определить



52

00:03:24,000 --> 00:03:28,000

геттер и сеттер для собственности. Так,



53

00:03:28,000 --> 00:03:32,000

в качестве первого аргумента мы передаем лицо, второй аргумент



54

00:03:32,000 --> 00:03:36,000

это имя целевого свойства, которое является именем, и



55

00:03:36,000 --> 00:03:40,000

третий аргумент - это объект, который является объектом нашего дескриптора свойства.



56

00:03:40,000 --> 00:03:44,000

Здесь мы добавляем атрибуты к этому свойству.



57

00:03:44,000 --> 00:03:48,000

Итак, в последнем разделе мы использовали get и set



58

00:03:48,000 --> 00:03:52,000

определить геттер и сеттер. Теперь мы будем использовать разные



59

00:03:52,000 --> 00:03:56,000

набор свойств. Так что я могу отправить это на запись



60

00:03:56,000 --> 00:04:00,000

ложный. И это станет только для чтения.



61

00:04:00,000 --> 00:04:04,000

Итак, если я установлю person.name, и скажем, Джон.



62

00:04:04,000 --> 00:04:08,000

А затем войти в консоль



63

00:04:08,000 --> 00:04:12,000

хорошо, смотрите, имя не изменилось, так что это



64

00:04:12,000 --> 00:04:16,000

записываемый атрибут. У нас есть еще один атрибут,



65

00:04:16,000 --> 00:04:20,000

перечислим, мы можем установить это в ложь, и тогда это будет



66

00:04:20,000 --> 00:04:24,000

не отображаются в object.keys. Поэтому, когда вы входите



67

00:04:24,000 --> 00:04:28,000

Object.keys,



68

00:04:28,000 --> 00:04:32,000

о человеке, посмотрите, теперь мы получаем пустой массив.



69

00:04:32,000 --> 00:04:36,000

Напротив, если бы это было правдой,



70

00:04:36,000 --> 00:04:40,000

это появилось бы здесь. Так что по умолчанию все эти



71

00:04:40,000 --> 00:04:44,000

атрибуты верны. Все свойства доступны для записи, перечислимы,



72

00:04:44,000 --> 00:04:48,000

и настраивается. Итак, что будет, если мы установим



73

00:04:48,000 --> 00:04:52,000

настраивается на ложь. Теперь мы не можем



74

00:04:52,000 --> 00:04:56,000

удалить это свойство. Итак, если я попытаюсь удалить



75

00:04:56,000 --> 00:05:00,000

person.name, ничего не произойдет. Так,



76

00:05:00,000 --> 00:05:04,000

давайте зарегистрируем человека на консоли, посмотрим



77

00:05:04,000 --> 00:05:07,633

свойство name все еще там.