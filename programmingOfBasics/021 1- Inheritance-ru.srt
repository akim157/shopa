1

00:00:00,000 --> 00:00:04,000

Наследование является одним из



2

00:00:04,000 --> 00:00:08,000

основные концепции объектно-ориентированного программирования, которые позволяют



3

00:00:08,000 --> 00:00:12,000

объект, чтобы взять на себя свойства и методы



4

00:00:12,000 --> 00:00:16,000

другой объект. И это облегчает повторное использование кода в разных



5

00:00:16,000 --> 00:00:20,000

части приложения. Вот пример. В последнем разделе



6

00:00:20,000 --> 00:00:24,000

мы определили этот объект круга с помощью этого метода. компьютер



7

00:00:24,000 --> 00:00:28,000

OptimumLocation. Теперь для этого обсуждения давайте представим



8

00:00:28,000 --> 00:00:32,000

здесь мы работаем с классом. Итак, давайте представим, что круг это класс, и



9

00:00:32,000 --> 00:00:36,000

не объект. Я хочу объяснить наследование в этих классических терминах.



10

00:00:36,000 --> 00:00:40,000

Таким образом, у нас есть этот класс круга с одним методом, computeOptimum



11

00:00:40,000 --> 00:00:44,000

Место нахождения. Давайте представим завтра мы собираемся добавить еще один класс



12

00:00:44,000 --> 00:00:48,000

к нашему приложению под названием квадрат. И квадрат тоже нужен



13

00:00:48,000 --> 00:00:52,000

этот метод, computeOptimumLocation. А пока давайте представим



14

00:00:52,000 --> 00:00:56,000

реализация этого объекта точно такая же



15

00:00:56,000 --> 00:01:00,000

через эти два разных класса, вы не хотите повторять эту реализацию.



16

00:01:00,000 --> 00:01:04,000

Потому что если в этом приложении есть ошибка, вы должны ее исправить



17

00:01:04,000 --> 00:01:08,000

в нескольких местах. Или если мы решим изменить реализацию



18

00:01:08,000 --> 00:01:12,000

Лучше, опять же, повторить это в разных местах.



19

00:01:12,000 --> 00:01:16,000

Так вот когда наследство приходит на помощь. Мы можем



20

00:01:16,000 --> 00:01:20,000

определите новый класс с именем Shape, поместите этот метод туда и



21

00:01:20,000 --> 00:01:24,000

есть круг и квадрат наследуют этот метод формы



22

00:01:24,000 --> 00:01:28,000

класса. Теперь по наследству у нас есть несколько терминов, с которыми вы должны быть знакомы,



23

00:01:28,000 --> 00:01:32,000

потому что я собираюсь использовать эти термины на протяжении всего этого курса. В



24

00:01:32,000 --> 00:01:36,000

На этой диаграмме мы называем класс формы базовым классом,



25

00:01:36,000 --> 00:01:40,000

или супер класс, или родительский класс. Все эти термины точно



26

00:01:40,000 --> 00:01:44,000

тот же самый. Различные учебники и разные книги используют разные термины.



27

00:01:44,000 --> 00:01:48,000

Напротив, мы называем круг прямым классом



28

00:01:48,000 --> 00:01:52,000

или подкласс, или дочерний класс, и, наконец,



29

00:01:52,000 --> 00:01:56,000

мы называем отношения наследования как



30

00:01:56,000 --> 00:02:00,000

-Отношения. Итак, мы говорим круг IS-A формы.



31

00:02:00,000 --> 00:02:04,000

Теперь это классическое определение наследования. Но, как вы знаете,



32

00:02:04,000 --> 00:02:08,000

в JavaScript у нас нет классов, у нас есть только объекты.



33

00:02:08,000 --> 00:02:12,000

Вот тогда-то и появляется прототипное наследование.



34

00:02:12,000 --> 00:02:16,000

По сути, у нас есть два типа наследования, классическое и



35

00:02:16,000 --> 00:02:20,000

прототип, и это одна из тем для вопросов интервью.



36

00:02:20,000 --> 00:02:24,000

Так что же такое прототип наследования? Это тема для следующей лекции.