1

00:00:00,000 --> 00:00:04,000

Один из



2

00:00:04,000 --> 00:00:08,000

Запутанные понятия в JavaScript здесь, функции



3

00:00:08,000 --> 00:00:12,000

являются объектами. Таким образом, эта функция круга мы имеем здесь



4

00:00:12,000 --> 00:00:16,000

на самом деле объект. Не верьте мне, позвольте мне показать вам, так что круг,



5

00:00:16,000 --> 00:00:20,000

посмотри это все



6

00:00:20,000 --> 00:00:24,000

члены функции круга или объекта круга.



7

00:00:24,000 --> 00:00:28,000

Таким образом, фиолетовые объекты - это методы, такие как call, bind, apply,



8

00:00:28,000 --> 00:00:32,000

и синие значки являются свойствами. Итак, давайте посмотрим



9

00:00:32,000 --> 00:00:36,000

на нескольких из этих членов в консоли. Здесь, в консоли,



10

00:00:36,000 --> 00:00:40,000

circle.name,



11

00:00:40,000 --> 00:00:44,000

который возвращает имя этой функции, circle.length



12

00:00:44,000 --> 00:00:48,000

вернул количество аргументов



13

00:00:48,000 --> 00:00:52,000

ранее в предыдущей лекции я говорил вам, что каждый объект в JavaScript



14

00:00:52,000 --> 00:00:56,000

имеет свойство конструктора, и это ссылается на функцию



15

00:00:56,000 --> 00:01:00,000

который был использован для создания объекта. Теперь вот интересная часть,



16

00:01:00,000 --> 00:01:04,000

Как вы думаете, кто создал этот объект?



17

00:01:04,000 --> 00:01:08,000

Давайте посмотрим, так что круг. Конструктор



18

00:01:08,000 --> 00:01:12,000

так что здесь у нас есть еще один встроенный конструктор под названием



19

00:01:12,000 --> 00:01:16,000

функция. И когда мы объявляем функцию с помощью этого



20

00:01:16,000 --> 00:01:20,000

синтаксис внутренне JavaScript движок будет использовать



21

00:01:20,000 --> 00:01:24,000

этот конструктор функции для создания этого объекта.



22

00:01:24,000 --> 00:01:28,000

Позволь мне показать тебе. Итак, я собираюсь определить



23

00:01:28,000 --> 00:01:32,000

константа под названием Circle1 отделить от нашего



24

00:01:32,000 --> 00:01:36,000

круг, установите его на новую функцию, теперь здесь



25

00:01:36,000 --> 00:01:40,000

наша функция требует 1 параметр, радиус, поэтому мы добавляем



26

00:01:40,000 --> 00:01:44,000

что здесь как строка. Теперь как второй



27

00:01:44,000 --> 00:01:48,000

аргумент, я собираюсь передать код



28

00:01:48,000 --> 00:01:52,000

внутри этой функции. Итак, чтобы разбить его на несколько строк,



29

00:01:52,000 --> 00:01:56,000

Я собираюсь использовать символ обратной галочки



30

00:01:56,000 --> 00:02:00,000

а затем просто скопируйте весь этот код



31

00:02:00,000 --> 00:02:04,000

и положи его сюда. Итак, когда мы объявляем



32

00:02:04,000 --> 00:02:08,000

функционировать внутри, это представляется так.



33

00:02:08,000 --> 00:02:12,000

Теперь мы можем назвать этот круг 1, так же, как называть наш круг



34

00:02:12,000 --> 00:02:16,000

функция. Итак, мы можем создать объект круга



35

00:02:16,000 --> 00:02:20,000

обновив Circle1,



36

00:02:20,000 --> 00:02:24,000

и передайте 1 как радиус. Сохраните изменения,



37

00:02:24,000 --> 00:02:28,000

Теперь в консоли, давайте войдем в круг. Посмотрите,



38

00:02:28,000 --> 00:02:32,000

это настоящий объект круга с этими двумя членами.



39

00:02:32,000 --> 00:02:36,000

Теперь давайте рассмотрим несколько методов, которые доступны в нашем



40

00:02:36,000 --> 00:02:40,000

функции. Итак, я собираюсь удалить весь этот код.



41

00:02:40,000 --> 00:02:44,000

Круг. здесь у нас есть это



42

00:02:44,000 --> 00:02:48,000

вызовите метод, и с этим мы можем вызвать функцию.



43

00:02:48,000 --> 00:02:52,000

Посмотрите на аргументы, первый аргумент



44

00:02:52,000 --> 00:02:56,000

этот аргумент. Здесь мы должны пройти



45

00:02:56,000 --> 00:03:00,000

пустой объект, и это, будет ссылаться



46

00:03:00,000 --> 00:03:04,000

этот объект, который мы передаем здесь. Хорошо?



47

00:03:04,000 --> 00:03:08,000

Теперь после этого мы добавляем наши аргументы явно. Итак, здесь мы



48

00:03:08,000 --> 00:03:12,000

есть один аргумент, мы передаем один. Если бы у нас было несколько аргументов,



49

00:03:12,000 --> 00:03:16,000

мы бы передавали их явно так, хорошо?



50

00:03:16,000 --> 00:03:20,000

Итак, это выражение точно



51

00:03:20,000 --> 00:03:24,000

как выражение в строке 11.



52

00:03:24,000 --> 00:03:28,000

Когда мы используем новый оператор, этот новый оператор будет внутренне



53

00:03:28,000 --> 00:03:32,000

создать пустой объект и передать его в качестве первого



54

00:03:32,000 --> 00:03:36,000

аргумент метода вызова. И этот объект



55

00:03:36,000 --> 00:03:40,000

определит контекст для этого. Так



56

00:03:40,000 --> 00:03:44,000

это будет ссылаться на этот объект. Ранее я говорил вам, что если



57

00:03:44,000 --> 00:03:48,000

вы не используете новый оператор, это по умолчанию



58

00:03:48,000 --> 00:03:52,000

будет указывать на глобальный объект, который является окном.



59

00:03:52,000 --> 00:03:56,000

Итак, если я хочу переписать это выражение таким образом,



60

00:03:56,000 --> 00:04:00,000

вместо того, чтобы пропустить пустой объект, я бы пропустил окно.



61

00:04:00,000 --> 00:04:04,000

Конечно, мы не хотим этого делать, я просто объясняю вам, что происходит



62

00:04:04,000 --> 00:04:08,000

под капотом. Итак, давайте вернемся назад,



63

00:04:08,000 --> 00:04:12,000

поэтому первый аргумент здесь указывает цель



64

00:04:12,000 --> 00:04:16,000

этого. Хорошо? Теперь у нас есть другой метод



65

00:04:16,000 --> 00:04:20,000

называется применить.



66

00:04:20,000 --> 00:04:24,000

Это так же, как метод вызова, с этим мы можем вызвать функцию



67

00:04:24,000 --> 00:04:28,000

но вместо передачи всех аргументов в явном виде,



68

00:04:28,000 --> 00:04:32,000

мы передаем их в массиве. Так что это полезно,



69

00:04:32,000 --> 00:04:36,000

если у вас уже есть массив где-то еще в вашем приложении, и вы хотите



70

00:04:36,000 --> 00:04:40,000

передать массив в качестве второго аргумента в метод apply.



71

00:04:40,000 --> 00:04:44,000

Так что это вынос, в JavaScript,



72

00:04:44,000 --> 00:04:47,466

функции являются объектами.