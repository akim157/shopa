/* ======== 1.What is OOP (Что такое программирование) ======= */
// A proramming paradigm centered around objects rather than functions.
// Парадигма программирования сосредоточена вокруг объектов, а не функций.
// OOP is not a programming language or tool!
// ООП не является языком программирования или инструментом!
// LANGUAGES (ЯЗЫКИ)
// С#
// Java
// Ruby
// Python
// JavaScript
/////////
// Так что же такое объектно-ориентированное программирование?
// Объектно-ориентированное программирование-это парадигма программирования или
// стиль программирования, который сосредоточен вокруг объектов, а не функций.
// Это ничего нового, это было вокруг с 70-х годов,
// но в отличие от инструментов и механизмов, которые приходят и уходят, объектно-ориентированное программирование
// по-прежнему очень актуально сегодня, это потому, что это не
// язык программирования или инструмент. Это стиль программирования или
// парадигма программирования. Существует несколько языков программирования
// которые поддерживают объектно-ориентированное программирование, такое как C#, Java,
// Ruby, Python, JavaScript и многое другое. Сейчас
// JavaScript немного спорный, но я вернусь к этому позже. Оно
// возможно, Вам будет интересно узнать, что многие из популярных фреймворков там, что вы можете знать
// или использовать на самом деле разработаны с объектно-ориентированного программирования
// концепции в уме. Угловой пример этих рамок.
// Итак, объектно-ориентированное программирование-очень популярный стиль
// программирования, и это всплывает во многих технических интервью.
// Так что если вы действительно хотите быть серьезным разработчиком, вы должны понять
// объектно-ориентированное программирование. Как технический интервьюер, если я вижу
// кандидат с объектно-ориентированным программированием в своем резюме, этот кандидат
// выделяется для меня. И вот где этот ускоренный курс входит.
// В этом курсе вы узнаете и поймете объектно-ориентированный
// принципы и способы их реализации в JavaScript.
/* ========= 2.Four Pillars of OOP (Четыре столпа ООП)============== */
// Популярный вопрос интервью
// касается четырех основных понятий объектно-ориентированного программирования.
// Эти понятия инкапсуляции, абстракции,
// наследование и полиморфизм. Давайте посмотрим на каждый
// из этих понятий. До объектно-ориентированного программирования, мы
// процедурное программирование, которое делит программу на набор функций. Так,
// у вас есть данные, хранящиеся в куче переменных и функций, которые
// оперировать данными. Этот стиль программирования очень прост и прямо вперед,
// часто это то, что вы узнаете как часть вашего первого
// предмет программирования в университете. Но по мере роста ваших программ вы будете
// в конечном итоге с кучей функций, которые повсюду.Ты можешь найти себя.
// копирование и вставка строк кода и сделать
// переход к одной функции, а затем несколько других функций ломаются.
// Это то, что мы называем кодом спагетти, есть так много взаимозависимости
// во всех этих функциях это становится проблематичным. Объектно-ориентированный
// пришел программирования, чтобы решить эту проблему, в объектно-ориентированном программировании
// мы объединяем группу связанных переменных и функций в
// блок. Мы называем эту единицу объектом. Мы ссылаемся на
// эти переменные как свойства, а функции как методы.
// Вот пример. Подумайте о машине. Автомобиль
// объект со свойствами, такими как марка, модель и цвет,
// и такие методы, как запуск, остановка и перемещение.
// Теперь вы можете сказать, но Мош, у нас нет автомобилей в наших программах! Дай мне
// реальный пример программирования! Хорошо, подумайте о локальном хранилище
// объект в ваших браузерах. Каждый браузер имеет локальный объект хранения 
// что позволяет хранить данные локально. Этот
// локальный объект хранения имеет свойство length, которое возвращает число
// объектов в хранилище и методы, такие как setItem и remove
// Пункт. Таким образом, в объектно-ориентированном программировании вы группируете связанные
// переменные и функции, которые работают с ними на объекты.
// И это то, что мы называем инкапсуляции. Позвольте мне показать вам пример
// этого в действии. Итак, здесь у нас есть три переменные,
// базовые, сверхурочные и ставки. Ниже этого, мы
// есть функция, чтобы рассчитать заработную плату для сотрудника. Мы ссылаемся
// к такому виду реализации как процедурному, поэтому у нас есть переменные
// с одной стороны, и функции с другой стороны, их трудно отделить.
// Теперь давайте рассмотрим объектно-ориентированный способ решения этой проблемы.
// У нас может быть объект employee с тремя свойствами,
// baseSalary, overtime и rate, а также метод, называемый
// getWage. Почему так лучше? Ну во-первых, посмотрите
// в функции получения заработной платы. Эта функция не имеет параметров.
// Напротив, в процедурном примере наша функция getWage
// имеет три параметра, причина в данной реализации
// не имеют никаких параметров, потому что все эти параметры на самом деле
// моделируется как свойства данного объекта. Все это
// свойства и функции getWage тесно связаны между собой, поэтому их
// часть одной единицы. Поэтому одним из симптомов процессуального кодекса
// функции с таким количеством параметров. При написании кода
// в объектно-ориентированном виде ваши функции в конечном итоге имеют все меньше и меньше
// параметры. Как говорит дядя Боб, лучшие функции
// те, у кого нет параметров. Чем меньше число параметров,
// чем проще использовать и поддерживать эту функцию. Так вот
// инкапсуляция. Теперь давайте посмотрим на абстракцию. Подумайте о
// DVD-плеер как объект. Этот DVD-плеер имеет сложную логику
// взаимодействовать. Вы просто нажимаете кнопку воспроизведения, и вам все равно
// что происходит внутри. Вся эта сложность скрыта от вас.
// Это абстракция на практике. Мы можем использовать ту же технику
// в наших объектах. Так что мы можем скрыть некоторые свойства и методы
// со стороны, и это дает нам пару преимуществ. Первый,
// это то, что мы сделаем интерфейс этих объектов проще,
// использование и понимание объекта с несколькими свойствами и методами
// это проще, чем объект с несколькими свойствами и методами.
// Второе преимущество заключается в том, что это помогает нам уменьшить
// влияние изменений. Давайте представим, что завтра мы изменим эти
// внутренние или частные методы. Ни одно из этих изменений не будет утечка
// снаружи, потому что у нас нет кода, который касается этих методов
// вне их содержащего объекта. Вы можете удалить метод, или изменить
// это параметры, но ни одно из этих изменений не повлияет на остальную часть
// код приложения. Так, с абстракцией, вы уменьшаете
// влияние изменений, теперь, третья основная концепция
// объектно-ориентированное программирование. Наследование. Наследование-это механизм, который
// позволяет исключить избыточный код. Вот пример.
// Думаю, что HTML-элементов, как поле, в выпадающем
// списки, флажки и так далее. Все эти элементы имеют несколько
// точки соприкосновения. Они должны иметь такие свойства, как скрытые и внутренние
// HTML и такие методы, как щелчок и фокус.
// Вместо переопределения всех этих свойств и методов для каждого
// HTML элемент, мы можем определить их один раз в общий объект
// назовите его HTMLElement и есть другие объекты
// наследование этих свойств и методов. Так что наследование помогает
// мы исключаем избыточный код. И, наконец, Полойморфизм,
// Poly означает много, morph означает
// форма. Таким образом, Поли морфизм означает множество форм. В
// объектно-ориентированное программирование, полиморфизм-это техника, которая позволяет
// избавьтесь от длинных if и l или switch и case
// заявления. Итак, вернемся к нашему примеру HTML-элементов, все эти
// объекты должны иметь возможность отображаться на странице. Но
// способ визуализации каждого элемента отличается от других.
// Если вы хотите отобразить несколько элементов HTML процедурным способом,
// наш код, вероятно, будет выглядеть так. Но с объектной ориентацией
// мы можем реализовать метод рендеринга в каждом из этих объектов,
// и метод рендеринга будет вести себя по-разному в зависимости
// на тип объекта мы ссылаемся. Таким образом, мы могли бы избавиться
// этот противный переключатель и случай, и использовать одну строку кода, как это.
// Вы увидите, что позже в курсе, так что вот преимущества
// объектно-ориентированное программирование. Используя инкапсуляцию, мы группируем
// связанные переменные и функции вместе, и таким образом мы можем